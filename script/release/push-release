#!/bin/bash
#
# Create the official release
#

. "$(dirname "${BASH_SOURCE[0]}")/utils.sh"

function usage() {
    >&2 cat << EOM
Publish a release by building all artifacts and pushing them.

This script requires that 'git config branch.${BRANCH}.release' is set to the
release version for the release branch.

EOM
    exit 1
}

BRANCH="$(git rev-parse --abbrev-ref HEAD)"
VERSION="$(git config "branch.${BRANCH}.release")" || usage
REPO=docker/compose
GITHUB_REPO=git@github.com:$REPO

# Check the build status is green
dobi release-check-github-build-status

echo "Tagging the release as $VERSION"
git tag $VERSION
git push $GITHUB_REPO $VERSION

echo "Uploading the docker image"
docker push docker/compose:$VERSION

echo "Uploading sdist to pypi"
dobi readme-rst source-tarball
if [ "$(command -v twine 2> /dev/null)" ]; then
    twine upload ./dist/docker-compose-${VERSION/-/}.tar.gz
else
    python setup.py upload
fi

echo "Testing pip package"
virtualenv venv-test
source venv-test/bin/activate
pip install docker-compose==$VERSION
docker-compose version
deactivate
rm -rf venv-test

echo "Now publish the github release, and test the downloads."
echo "Email maintainers@dockerproject.org and engineering@docker.com about the new release."
